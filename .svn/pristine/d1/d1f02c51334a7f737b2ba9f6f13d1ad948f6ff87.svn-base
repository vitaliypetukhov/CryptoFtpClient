
#include "Controls.h"
#include "Client.h"

#include "Headers.h"

#define WM_CLIENT_INIT WM_USER + 1 

extern HINTERNET hInternet, hIConnect;
FtpClient client;
Settings settings;
// Параметры окна
const int WindowWidth = 745;
const int WindowHeight = 455;
// Идентификация фтп клиента
char szWindowName[MAX_PATH] = "FTP Client";
// Название класса приложения
char szClassName[MAX_PATH] = "FTP Client Test App";
// Буфер ошибок
char szErrorBuff[MAX_PATH] = {0};
// Параметры соединения

// Локальный и серверные пути текущего расположения
char szLocalPath[MAX_PATH] = {0};
char szFtpPath[MAX_PATH] = {0};
// Айди потока
HANDLE thID = 0;
HANDLE InitEvent = 0;
// Маркер состояния соединения
bool Connected = false;
// Хендлы элментов
HWND hWndMain = 0, hEditAdress = 0, hEditUserName = 0, hEditUserPassword = 0, 
	hButtonConnect = 0, hButtonDownload = 0, hButtonUpload = 0, hButtonSettings = 0, 
	hLocalListView = 0, hFtpListView = 0, hComboBox = 0, hStatusBar = 0, 
	hProgBar = 0, hStatic = 0, hDlg = 0;
// Список файлов текущей директории фтп
vector<WIN32_FIND_DATA> FtpFileList;
// Список файлов текущей директории фтп
vector<WIN32_FIND_DATA> LocalFileList;
// Оконная процедура
LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
// Калбек процедура диалогового окна загрузки
BOOL CALLBACK ProgressDlgProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
BOOL CALLBACK SettingsDlgProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
// Функция скачивания
DWORD WINAPI Download(LPVOID lpParam);
// Функция закачивания
DWORD WINAPI Upload(LPVOID lpParam);

// Главная функция
int WINAPI WinMain(HINSTANCE hInstance, 
				   HINSTANCE hPrevInstance,
				   LPSTR lpCmdLine,
				   int nCmdShow)
{
	// Получаем дескриптор приложения
	hInstance				= GetModuleHandle(NULL);
		
	if((hWndMain = ClientCreateWindow(hInstance, WndProc, 
								szClassName, szWindowName,
								WindowWidth, WindowHeight)) == 0)
	{
		MessageBox( NULL, "Window Creation Error.", "ERROR", MB_OK | MB_ICONEXCLAMATION );
		// Ошибка создания окна
		return false;
	}
	// Показать окно
	ShowWindow(hWndMain, SW_SHOW);
	// Слегка повысим приоритет
	SetForegroundWindow(hWndMain);
	// Установить фокус клавиатуры на наше окно
	SetFocus(hWndMain);
	///////////////////////////////// Создание компонентов ///////////////////////////////////
	if(!ClientCreateEdits(hInstance, hWndMain, hEditAdress, hEditUserName, hEditUserPassword) ||
		!ClientCreateButtons(hInstance, hWndMain, hButtonConnect, hButtonDownload, hButtonUpload, hButtonSettings) ||
		!ClientCreateListViews(hInstance, hWndMain, hLocalListView, hFtpListView) ||
		!ClientCreateStatusBar(hInstance, hWndMain, 0, 2, hStatusBar) ||
		!ClientCreateComboBox(hInstance, hWndMain, hComboBox))
	{
		MessageBox(0, "Error Create Client Components", "Error initialize components", MB_OK | MB_ICONEXCLAMATION);
		return false;
	}
	// Устанавливаем идентификаторы контролов
	client.SetControls(hEditAdress, hEditUserName, hEditUserPassword, 
		hButtonConnect, hButtonDownload, hButtonUpload,
		hLocalListView, hFtpListView, hComboBox, hStatusBar);
	if(!settings.Load())
	{
		settings.Default();
		settings.Save();
	}
	// Отсылаем сообщения компонентам для обновления текста полей ввода
	SendMessage(hEditAdress, WM_SETTEXT, settings.Adress.size(), LPARAM(settings.Adress.c_str()));
	SendMessage(hEditUserName, WM_SETTEXT, settings.Login.size(), LPARAM(settings.Login.c_str()));
	SendMessage(hEditUserPassword, WM_SETTEXT, settings.Password.size(), LPARAM(settings.Password.c_str()));
	SendMessage(hComboBox, SB_GETTEXT, 0, (LPARAM) szLocalPath);
	SendMessage(hStatusBar, SB_SETTEXT, (WPARAM)(INT) 1 | 0, (LPARAM) szLocalPath);
	
	// Сообщение
	MSG Msg;
	// Цикл выборки сообщений
	while(GetMessage(&Msg, 0, 0, 0))
	{
		
		switch (Msg.message)
        {
            case WM_KEYDOWN:
				if(LOWORD(Msg.wParam) == VK_ESCAPE)
				{
					client.Disconnect();
					PostQuitMessage(0);
				}     
            break;	
		case WM_SYSCHAR:
		case WM_SYSKEYUP:
		case WM_SYSKEYDOWN:
			if(LOWORD(Msg.wParam) == VK_ESCAPE)
			{
				client.Disconnect();
				PostQuitMessage(0);
				return 0;	
			}
        }
		
		if(!IsDialogMessage(hWndMain, &Msg))
        {
            TranslateMessage( &Msg );   
            DispatchMessage( &Msg );
		}
	}
	return Msg.wParam;
}
// Оконная процедура
LRESULT CALLBACK WndProc(HWND hWnd, 
						 UINT uMsg, 
						 WPARAM wParam, 
						 LPARAM lParam)
{
	switch(uMsg)
	{
	case WM_SYSCHAR:
	case WM_SYSKEYUP:
	case WM_SYSKEYDOWN:
		if(LOWORD(wParam) == VK_ESCAPE)
		{
			client.Disconnect();
			PostQuitMessage(0);
		}
		return 0;
	case WM_INITDIALOG:
		return 0;
	case WM_ACTIVATE:
		return 0;
	case WM_COMMAND:
		{
			// Обрабатываем сообщение комбобокса при изменении пункта выпадающего меню
			if((HWND)lParam == hComboBox)
			{
				if(HIWORD(wParam) == CBN_SELENDOK)
				{
					int idx_row;
					idx_row = SendMessage(hComboBox, CB_GETCURSEL, 0, 0);
					SendMessage(hComboBox, CB_GETLBTEXT, idx_row, (LPARAM)szLocalPath);
					// Получаем локальный адрес расположения
					SendMessage(hStatusBar, SB_SETTEXT, (WPARAM)(INT) 1 | 0, (LPARAM) szLocalPath);
					// Добавляем данные текущего каталога в список
					SetCurrentDirectory(szLocalPath);
					client.SetControls(hEditAdress, hEditUserName, hEditUserPassword, 
						hButtonConnect, hButtonDownload, hButtonUpload,
						hLocalListView, hFtpListView, hComboBox, hStatusBar);
					// Отображаем список файлов
					client.LocalShowDir(LocalFileList);
				}
			}     
			// Обрабатываем нажатие кнопки соединения
			if((HWND)lParam == hButtonConnect)
			{
				// Выключаем кнопку
				EnableWindow(hButtonConnect, FALSE);
				// Соединяемся или разъединяемся в зависимости от состояния маркера соединения
				if(Connected == false)
				{
					// Получаем адресс фтп сервера
					SendMessage(hEditAdress, WM_GETTEXT, MAX_PATH, LPARAM(szErrorBuff));
					settings.Adress = szErrorBuff;
					// Логин
					SendMessage(hEditUserName, WM_GETTEXT, MAX_PATH, LPARAM(szErrorBuff));
					settings.Login = szErrorBuff;
					// Пароль
					SendMessage(hEditUserPassword, WM_GETTEXT, MAX_PATH, LPARAM(szErrorBuff));
					settings.Password = szErrorBuff;
					// Попытка соединения
					DWORD code = client.Connect(settings);
					// Проверяем результат операции
					if(code == 0)
					{
						// Меняем состояние маркера соединения
						Connected = true;

						if(ListView_GetNextItem(hLocalListView, -1, LVNI_SELECTED) != -1)
							EnableWindow(hButtonUpload, TRUE);
						// Выключаем поле ввода адреса
						SendMessage(hEditAdress, EM_SETREADONLY, TRUE, 0);
						// Выключаем поле ввода логина
						SendMessage(hEditUserName, EM_SETREADONLY, TRUE, 0);
						// Выключаем поле ввода пароля
						SendMessage(hEditUserPassword, EM_SETREADONLY, TRUE, 0);
						// Включаем область списка файлов сервера
						EnableWindow(hFtpListView, TRUE);
						// Меняем надпись на кнопке
						SendMessage(hButtonConnect, WM_SETTEXT, sizeof("Disconnect"), LPARAM("Disconnect"));
						// Вызываем функцию показа содержимого текущего каталого сервера
						code = client.FtpShowDir(FtpFileList);
						// Обрабатываем результат работы функции
						if(code != 0)
						{
							// Получаем информацию об ошибке
							client.CheckLastError(code, szErrorBuff);
							// Выводим ошибку
							MessageBox(0, szErrorBuff, "Ошибка", MB_OK | MB_ICONEXCLAMATION);
							// Отключаемся
							client.Disconnect();
							// Меняем состояние маркера соединения
							Connected = false;
						}
					}
					// Соединение не удалось
					else
					{
						// Получаем информацию об ошибке
						client.CheckLastError(code, szErrorBuff);
						// Выводим ошибку
						MessageBox(0, szErrorBuff, "Ошибка", MB_OK | MB_ICONEXCLAMATION);
						// Отключаемся
						client.Disconnect();
						// Меняем состояние маркера соединения
						Connected = false;
					}				
				}
				else
				{
					// Отключаемся
					client.Disconnect();
					// Меняем состояние маркера соединения
					Connected = false;
				}
				// Включаем кнопку
				EnableWindow(hButtonConnect, TRUE);
			}
			if((HWND)lParam == hButtonDownload)
			{
				// Выключаем кнопку загрузки
				EnableWindow(hButtonDownload, FALSE);
				// Создаем событие инициализации
				InitEvent = CreateEvent(0, TRUE, FALSE, 0);
				// Создаем поток
				thID = CreateThread(0, 0, Download, 0, 0, 0);
				
				//client.TransitEvent = CreateEvent(0, TRUE, FALSE, 0);
				// Вызываем показ диалога процесса загрузки
				DialogBox(0, MAKEINTRESOURCE(IDD_DIALOGBAR), hWndMain, ProgressDlgProc);
				// Ожидаем завершения
				//WaitForSingleObject(client.TransitEvent, INFINITE);
				//CloseHandle(client.TransitEvent);
				// Ожидаем завершения потока
				WaitForSingleObject(thID, INFINITE);
				client.LocalShowDir(LocalFileList);
				// Включаем кнопку
				EnableWindow(hButtonDownload, TRUE);
			}
			if((HWND)lParam == hButtonUpload)
			{
				// Выключаем кнопку загрузки
				EnableWindow(hButtonDownload, FALSE);
				// Создаем поток
				thID = CreateThread(0, 0, Upload, 0, 0, 0);
				// Создаем событие инициализации диалога 
				InitEvent = CreateEvent(0, TRUE, FALSE, 0);
				// Создаем событие процесса выгрузки данных на сервер
				client.TransitEvent = CreateEvent(0, TRUE, FALSE, 0);
				// Вызываем показ диалога процесса загрузки
				DialogBox(0, MAKEINTRESOURCE(IDD_DIALOGBAR), hWndMain, ProgressDlgProc);
				// Ожидаем завершения процесса выгрузки
				WaitForSingleObject(client.TransitEvent, INFINITE);
				// Закрываем событие
				CloseHandle(client.TransitEvent);
				// Ожидаем завершения потока
				WaitForSingleObject(thID, INFINITE);
				// Завершили загрукзу - выводим список файлов
				client.FtpShowDir(FtpFileList);
				// Включаем кнопку
				EnableWindow(hButtonUpload, TRUE);
			}
			if((HWND)lParam == hButtonSettings)
			{
				// Вызываем показ диалога процесса загрузки
				DialogBox(0, MAKEINTRESOURCE(IDD_DIALOGBAR_SETTINGS), hWndMain, SettingsDlgProc);
			}
		}
		return 0;
		case WM_NOTIFY:
            {
				// Сообщение от списка локальных файлов
				if((((LPNMHDR)lParam)->hwndFrom) == hLocalListView)
				{
					switch (((LPNMHDR)lParam)->code)
                    {
						case LVN_ITEMCHANGED:
						{
							if(SendMessage(hLocalListView, LVM_GETNEXTITEM, -1, LVNI_SELECTED) != -1 && Connected)
								EnableWindow(hButtonUpload, TRUE);
							else
								EnableWindow(hButtonUpload, FALSE);
						}
						break;
                        case NM_DBLCLK:
                        {
							// Получаем индекс клика
							int ItemIndex = SendMessage(hLocalListView, LVM_GETNEXTITEM, -1, LVNI_SELECTED);
							
							if(ItemIndex != -1)
							{
								// Если клик произвели по директории
								if(!(LocalFileList.at(ItemIndex).dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY))
									return 0;
								// Попытка смены папки
								DWORD code = client.LocalChangeDir(LocalFileList.at(ItemIndex).cFileName);
								// Обрабатываем результат работы функции смены каталога
								if(code == 0)
								{
									// Вызываем функцию показа содержимого текущего каталого сервера
									code = client.LocalShowDir(LocalFileList);
									// Выделяем первый элемент в списке
									ListView_SetItemState(hLocalListView, 0, LVIS_FOCUSED | LVIS_SELECTED, 0x000F);
									// Снимаем выделение
									ListView_SetItemState(hLocalListView, 0, LVIS_FOCUSED & LVIS_SELECTED, 0x000F);
									if(code != 0)
									{
										// Получаем информацию об ошибке
										client.CheckLastError(code, szErrorBuff);
										// Выводим ошибку
										MessageBox(hWndMain, szErrorBuff, "Ошибка", MB_OK | MB_ICONEXCLAMATION);
									}
								}
								else
								{
									// Получаем информацию об ошибке
									client.CheckLastError(code, szErrorBuff);
									// Выводим ошибку
									MessageBox(hWndMain, szErrorBuff, "Ошибка", MB_OK | MB_ICONEXCLAMATION);
								}								
							}							
                        }
						break;
					default:
						break;
                    }
				}
				// Сообщение от списка фтп файлов
				if((((LPNMHDR)lParam)->hwndFrom) == hFtpListView)
                {
                    switch (((LPNMHDR)lParam)->code)
                    {
					case LVN_ITEMCHANGED:
						{
							if(SendMessage(hFtpListView, LVM_GETNEXTITEM, -1, LVNI_SELECTED) != -1)
								EnableWindow(hButtonDownload, TRUE);
							else
								EnableWindow(hButtonDownload, FALSE);
						}
						break;		
                        case NM_DBLCLK:
                        {
							// Получаем индекс клика
							int ItemIndex = SendMessage(hFtpListView, LVM_GETNEXTITEM, -1, LVNI_SELECTED);
							if(ItemIndex != -1)
							{
								if(!(FtpFileList.at(ItemIndex).dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY))
									return 0;
								// Попытка смены папки
								DWORD code = client.FtpChangeDir(FtpFileList.at(ItemIndex).cFileName);
									//Utf8_to_cp1251(FtpFileList.at(ItemIndex).cFileName).c_str());
								// Обрабатываем результат работы функции смены каталога
								if(code == 0)
								{
									// Вызываем функцию показа содержимого текущего каталого сервера
									code = client.FtpShowDir(FtpFileList);
									// Выделяем первый элемент в списке
									ListView_SetItemState(hFtpListView, 0, LVIS_FOCUSED | LVIS_SELECTED, 0x000F);
									// Снимаем выделение
									ListView_SetItemState(hFtpListView, 0, LVIS_FOCUSED & LVIS_SELECTED, 0x000F);
									// Проверяем код ответа функции
									if(code != 0)
									{
										// Получаем информацию об ошибке
										client.CheckLastError(code, szErrorBuff);
										// Выводим ошибку
										MessageBox(hWndMain, szErrorBuff, "Ошибка", MB_OK | MB_ICONEXCLAMATION);
									}
								}
								else
								{
									// Получаем информацию об ошибке
									client.CheckLastError(code, szErrorBuff);
									// Выводим ошибку
									MessageBox(hWndMain, szErrorBuff, "Ошибка", MB_OK | MB_ICONEXCLAMATION);
									// Произошел разрыв соединения
									if(code == ERROR_INTERNET_CONNECTION_ABORTED)
										// Отсоединяемся приводим в порядок интерфейс и переменные
										client.Disconnect();
								}								
							}							
                        }
						break;
					default:
						break;
                    }
                }
            }
			return 0;
	case WM_DESTROY:
		client.Disconnect();
		InternetCloseHandle(hIConnect);
		InternetCloseHandle(hInternet);		
		PostQuitMessage(0);
		return  0;
	}
	return DefWindowProc(hWnd, uMsg, wParam, lParam);
}
// Калбек процедура диалогового окна загрузки
BOOL CALLBACK ProgressDlgProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
	// Обрабатываем сообщение
	switch(uMsg) 
	{
		case WM_COMMAND:
		{
			if((HWND)lParam == GetDlgItem(hWnd, IDC_BUTTON1))
			{
				DWORD dwWaitResult = -1;
				// Маркер отмены загрузки
				client.Abort = true;
				// Ожидаем события
				while(dwWaitResult != WAIT_OBJECT_0)
					dwWaitResult = WaitForSingleObject(client.TransitEvent, 100);
				// Закрываем евент
				CloseHandle(client.TransitEvent);
				// Принудительно завершаем поток
				TerminateThread(thID, -1);		
				// Завершаем диалог
				EndDialog(hWnd, 0);
			}
		}
		case WM_INITDIALOG:
		{
			INITCOMMONCONTROLSEX InitCtrlEx;
			InitCtrlEx.dwSize = sizeof(INITCOMMONCONTROLSEX);
			InitCtrlEx.dwICC  = ICC_PROGRESS_CLASS;
			InitCommonControlsEx(&InitCtrlEx);	
			hProgBar = GetDlgItem(hWnd, IDC_PROGRESS1);
			hStatic = GetDlgItem(hWnd, IDC_STATIC_133);
			hDlg = hWnd;
			// Задаем событие инициализации окончено
			SetEvent(InitEvent);
			return TRUE;
		}
		case WM_CLOSE:
			// Завершаяем диалог
			EndDialog(hWnd, 0);
			break;
		default:
			return FALSE;
	}	
	return FALSE;
}
// Калбек процедура диалогового окна загрузки
BOOL CALLBACK SettingsDlgProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
	char buff[MAX_PATH] = {0};
	// Обрабатываем сообщение
	switch(uMsg) 
	{
		case WM_COMMAND:
		{
			// Применение настроек
			if((HWND)lParam == GetDlgItem(hWnd, IDC_BTN_SAVE))
			{
				// Порт
				SendMessage(GetDlgItem(hWnd, IDC_EDIT_DEFAULT_PORT), WM_GETTEXT, MAX_PATH, LPARAM(buff));
				settings.connectionPort = atoi(buff);
				memset(buff, 0, sizeof(char) * MAX_PATH);
				// Адрес
				SendMessage(GetDlgItem(hWnd, IDC_EDIT_DEFAULT_URL), WM_GETTEXT, MAX_PATH, LPARAM(settings.Adress.c_str()));
				// Логин
				SendMessage(GetDlgItem(hWnd, IDC_EDIT_DEFAULT_LOGIN), WM_GETTEXT, MAX_PATH, LPARAM(settings.Login.c_str()));
				// Пароль
				SendMessage(GetDlgItem(hWnd, IDC_EDIT_DEFAULT_PASS), WM_GETTEXT, MAX_PATH, LPARAM(settings.Password.c_str()));
				// Ключ
				SendMessage(GetDlgItem(hWnd, IDC_EDIT_USER_KEY), WM_GETTEXT, MAX_PATH, LPARAM(settings.Key.c_str()));
				// Сохраняем настройки
				if(!settings.Save())
				{
					// Если ошибка - создаем по умолчанию и сохраняем
					settings.Default();
					settings.Save();
				}
				// Завершаяем диалог
				SendMessage(hWnd, WM_CLOSE, 0, 0);
			}
			// Отмена
			if((HWND)lParam == GetDlgItem(hWnd, IDC_BTN_CANCEL))
			{
				// Завершаяем диалог
				SendMessage(hWnd, WM_CLOSE, 0, 0);
			}
		}
		break;
		case WM_INITDIALOG:
			{
				if(!settings.Load())
				{
					MessageBox(hWnd, "Файл настроек не найден!\r\nСоздаем файл настроек по умолчанию...", "Ошибка чтения настроек", MB_OK | MB_ICONEXCLAMATION);
					settings.Default();
					settings.Save();
				}		
				// Записываем настройки в поля
				sprintf(buff, "%d", settings.connectionPort);
				SendMessage(GetDlgItem(hWnd, IDC_EDIT_DEFAULT_PORT), WM_SETTEXT, MAX_PATH, LPARAM(buff));
				// Адрес
				SendMessage(GetDlgItem(hWnd, IDC_EDIT_DEFAULT_URL), WM_SETTEXT, MAX_PATH, LPARAM(settings.Adress.c_str()));
				// Логин
				SendMessage(GetDlgItem(hWnd, IDC_EDIT_DEFAULT_LOGIN), WM_SETTEXT, MAX_PATH, LPARAM(settings.Login.c_str()));
				// Пароль
				SendMessage(GetDlgItem(hWnd, IDC_EDIT_DEFAULT_PASS), WM_SETTEXT, MAX_PATH, LPARAM(settings.Password.c_str()));
				// Ключ
				SendMessage(GetDlgItem(hWnd, IDC_EDIT_USER_KEY), WM_SETTEXT, MAX_PATH, LPARAM(settings.Key.c_str()));
			}
			return TRUE;
		case WM_CLOSE:
			{
				// Записываем настройки в поля
				// Адрес
				SendMessage(hEditAdress, WM_SETTEXT, MAX_PATH, LPARAM(settings.Adress.c_str()));
				// Логин
				SendMessage(hEditUserName, WM_SETTEXT, MAX_PATH, LPARAM(settings.Login.c_str()));
				// Пароль
				SendMessage(hEditUserPassword, WM_SETTEXT, MAX_PATH, LPARAM(settings.Password.c_str()));
				// Завершаяем диалог
				EndDialog(hWnd, 0);
			}
			break;
		default:
			return FALSE;
	}	
	return FALSE;
}
// Функция скачивания
DWORD WINAPI Download(LPVOID lpParam)
{
	TCHAR szMsgBuff[MAX_PATH] = {0};
	TCHAR from[MAX_PATH] = {0};
	TCHAR to[MAX_PATH] = {0};

	//client.Abort = false;

	DWORD code = 0;
	// Ожидаем событие инициализации
	while(WaitForSingleObject(InitEvent, 100) != WAIT_OBJECT_0);
	// Закрываем хендл события инициализации
	CloseHandle(InitEvent);
	// Получаем индекс клика
	int ItemIndex = SendMessage(hFtpListView, LVM_GETNEXTITEM, -1, LVNI_SELECTED);
	// Получаем текущий адрес расположения на сервере
	SendMessage(hStatusBar, SB_GETTEXT, (WPARAM)(INT) 0 | 0, (LPARAM)szFtpPath);
	// Получаем текущий адрес локального расположения
	SendMessage(hStatusBar, SB_GETTEXT, (WPARAM)(INT) 1 | 0, (LPARAM)szLocalPath);
	vector<string> directories;
	TCHAR serverPath[MAX_PATH] = {0};
	TCHAR localPath[MAX_PATH] = {0};
	TCHAR temp[MAX_PATH] = {0};
	strcpy(serverPath, szFtpPath);
	strcpy(localPath, szLocalPath);
	// Задания
	vector<pair<string, string>> todo;
	// Пока есть выделенные элементы
	while(ItemIndex != -1 && code == 0)
	{
		// Собираем директории в список
		if(FtpFileList.at(ItemIndex).dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)
		{
			directories.push_back(FtpFileList.at(ItemIndex).cFileName);
			sprintf(to, "%s%s\\", szLocalPath, FtpFileList.at(ItemIndex).cFileName);
			// Создаем локальную директорию
			if(CreateDirectory(to, 0))
			{
				// Копируем в буфер
				client.CheckLastError(GetLastError(), szMsgBuff);
				// Выводим сведения ошибки
				MessageBox(0, szMsgBuff, "Ошибка создания локального каталога.", MB_OK | MB_ICONEXCLAMATION);
				break;
			}
		}
		else
		{
			sprintf(from, "%s/%s", szFtpPath, FtpFileList.at(ItemIndex).cFileName);
			sprintf(to, "%s%s", szLocalPath, FtpFileList.at(ItemIndex).cFileName);
			code = client.GetFile(from, to, hProgBar, hStatic);
			if(code != 0)
			{
				client.CheckLastError(code, szErrorBuff);
				MessageBox(0, szErrorBuff, "Error", MB_OK | MB_ICONEXCLAMATION);
			}
		}
		// Переходим к следующему выделенному элементу
		ItemIndex = ListView_GetNextItem(hFtpListView, ItemIndex, LVNI_SELECTED); 
	}

	while(directories.size())
	{
		for(size_t i = 0; i < directories.size(); i++)
		{
			sprintf(from, "%s/%s", serverPath, directories.at(i));

		}
		
		sprintf(to, "%s%s", szLocalPath, FtpFileList.at(ItemIndex).cFileName);
		code = client.GetFile(from, to, hProgBar, hStatic);
		if(code != 0)
		{
			client.CheckLastError(code, szErrorBuff);
			MessageBox(0, szErrorBuff, "Error", MB_OK | MB_ICONEXCLAMATION);
		}
	}



	// Заливка на сервер завершена
	SetEvent(client.TransitEvent);
	// Завершаем диалог
	EndDialog(hDlg, 0);
	return 0;
}
// Функция закачки на сервер
DWORD WINAPI Upload(LPVOID lpParam)
{
	client.Abort = false;
	DWORD dwWaitResult = -1;
	DWORD code = 0;
	// Ожидаем событие инициализации показа диалога с прогресс баром
	while(dwWaitResult != WAIT_OBJECT_0) 
		dwWaitResult = WaitForSingleObject(InitEvent, 100);
	// Закрываем событие
	CloseHandle(InitEvent);
	// Получаем индекс клика
	int ItemIndex = SendMessage(hLocalListView, LVM_GETNEXTITEM, -1, LVNI_SELECTED);
	// Получаем текущий адрес расположения на сервере
	SendMessage(hStatusBar, SB_GETTEXT, (WPARAM)(INT) 0 | 0, (LPARAM)szFtpPath);
	// Получаем текущий адрес локального расположения
	SendMessage(hStatusBar, SB_GETTEXT, (WPARAM)(INT) 1 | 0, (LPARAM)szLocalPath);
	// Пока есть выделенные элементы
	while(ItemIndex != -1 && code == 0)
	{
		code = client.FtpUpload(szFtpPath, szLocalPath, LocalFileList.at(ItemIndex), hProgBar, hStatic);
		if(code != 0)
		{
			client.CheckLastError(code, szErrorBuff);
			MessageBox(0, szErrorBuff, "Error", MB_OK | MB_ICONEXCLAMATION);
		}
		// Переходим к следующему выделенному элементу
		ItemIndex = ListView_GetNextItem(hLocalListView, ItemIndex, LVNI_SELECTED);
	}
	// Заливка на сервер завершена
	SetEvent(client.TransitEvent);
	// Завершаем диалог
	EndDialog(hDlg, 0);
	return 0;
}